@page "/floki"
@using SharedProject.Services;
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenNotification></RadzenNotification>

<div class="w-100 mt-5 d-flex flex-column align-items-center">
    <div class="col-12 col-md-5">
        <RadzenSpeechToTextButton StopRecordingAfter="10" Change="@(args => OnSpeechCaptured(args, true))" />
        
    </div>
    <div class="col-12 col-md-5">
        <RadzenFormField class="w-100" Style="font-size: 0.8em; color:grey" Text="E.G. Heyy Viola, What is the legal definition of 'breach of contract'">
            <RadzenTextArea class="" @bind-Value=@message Style="color:black" />
        </RadzenFormField>
    </div>
    <div class="col-8 col-md-3">
        <RadzenButton class="mt-4 w-100" style="height: 40px" Icon="send" BusyText="Viola is Processing ..." IsBusy=@busy Click=@OnClick Text="Submit" />
    </div>
</div>
<div class="w-100 mt-5 d-flex flex-column align-items-center">
    <div class=" col-12 col-md-6">
        <RadzenHtmlEditor @bind-Value=@htmlValue style="height: 300px;" UploadUrl="upload/image" />
    </div>
</div>

@code {
        string htmlValue = "";
        bool busy = false;
        int count = 0;
        public async void countdown()
        {
            while(count <= 6)
            {
                count = count + 1;
                await Task.Delay(1000);
            }
        }
        EventConsole? console;
        string smsVisibility = "d-none";
        string? service = null;
        TwilioService TwilioService = new TwilioService();
        Variant variant = Variant.Outlined;
        String phoneNumber = "";
        String message = "";
        string value = "";
        List<String> customers = new List<string>()
    {
        "SMS","Voice", "Whatsapp", "Email", "Video"
    };

        public void onDropDown()
        {
            if (value.ToLower() == "sms")
            {
                value = "sms";
                smsVisibility = "d-block";
            }
        }
        async Task OnClick()
        {
            busy = true;
            if(message == string.Empty)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Please Type an Appropriate message", Detail = "Inapropriate Message", Duration = 4000 });
                busy = false;
                return;
            }
            else
            {
                CompletionMessageParameter body = new CompletionMessageParameter
                {
                    prompts = message
                };
                HttpClient httpClient = new HttpClient();
                HttpResponseMessage response = await httpClient.PostAsync("https://localhost:7282/api/OpenAI", new StringContent("\""+message+"\"", System.Text.Encoding.UTF8, "application/json"));
                string responseString = await response.Content.ReadAsStringAsync();
                Console.WriteLine(responseString);
                htmlValue += "<div>" + responseString + "<div/> <br />";
            }
            await Task.Delay(2000);
            busy = false;
        }
        private async void OnClick(string text)
        {
            //String status = TwilioService.SendSms(phoneNumber, message);
            CompletionMessageParameter body = new CompletionMessageParameter
        {
            prompts = text
        };
            HttpClient httpClient = new HttpClient();
            var jsonObj = Newtonsoft.Json.JsonConvert.SerializeObject(body);
            var content = new StringContent(jsonObj, System.Text.Encoding.UTF8, "application/json");
            HttpResponseMessage response = await httpClient.PostAsync("https://localhost:7282/api/OpenAI", content);
            console.Log(response.Content.ReadAsStringAsync());
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = response.Content.ToString(), Detail = response.StatusCode.ToString(), Duration = 100000 });
            console.Log($"{response.Content} value changed to");
            //if(status == true)
            //{
            //    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Message Sent Successfully", Detail = "Success Detail", Duration = 4000 });
            //}
            //else
            //{
            //    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Message Could not be sent", Detail = text });
        //}
        }
        public void renderResponse(HttpResponseMessage response)
        {
            
        }

    void OnSpeechCaptured(string speechValue, bool updateTextArea)
    {

        if (updateTextArea)
        {
            message += speechValue;
        }
    }


}
