@using BlazorBootstrap.Extensions
@using Color = System.Drawing.Color

<BarChart @ref="barChart" style="width: calc(100vw - 61px - 3.9em);" Class="mb-4" />
@*<Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Primary" Size="Size.Small" @onclick="async () => await AddDataAsync()">Add Random Data</Button>
<Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Primary" Size="Size.Small" @onclick="async () => await ShowHorizontalBarChartAsync()">Horizontal Bar Chart</Button>
<Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Primary" Size="Size.Small" @onclick="async () => await ShowVerticalBarChartAsync()">Vertical Bar Chart</Button>*@
@code {
    private BarChart? barChart;
    private ChartData? chartData;
    private BarChartOptions? chartOptions;

    static Random random = new Random();

    static Color c1 = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
    static Color c2 = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
    static Color c3 = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
    protected override void OnInitialized()
    {
        chartData = new ChartData
            {
                Labels = new List<string> { "January", "February", "March", "April", "May", "June", "July" },
                Datasets = new List<IChartDataset>()
            };

        chartData.Datasets.Add(GetRandomBarChartDataset());
        chartData.Datasets.Add(GetRandomBarChartDataset());
        chartData.Datasets.Add(GetRandomBarChartDataset());

        chartOptions = new BarChartOptions
            {
                Responsive = true,
                Interaction = new Interaction { Mode = InteractionMode.Index }
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barChart.InitializeAsync(chartData, chartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task AddDataAsync()
    {
        if (chartData is null || chartData.Datasets is null) return;

        chartData.Datasets.Add(GetRandomBarChartDataset());
        await barChart.UpdateAsync(chartData, chartOptions);
    }

    private async Task ShowHorizontalBarChartAsync()
    {
        chartOptions.IndexAxis = "y";
        await barChart.UpdateAsync(chartData, chartOptions);
    }

    private async Task ShowVerticalBarChartAsync()
    {
        chartOptions.IndexAxis = "x";
        await barChart.UpdateAsync(chartData, chartOptions);
    }

    private BarChartDataset GetRandomBarChartDataset()
    {
        // random color
        Color c = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
        Console.WriteLine($"Bar Chart: Color Name: {c.Name}, HEX: {c.ToHexString()}, RGB: {c.ToRgbString()}, IsNamedColor: {c.IsNamedColor}");

        return new BarChartDataset()
            {
                Label = items[chartData.Datasets.Count],
                Data = new List<double> { random.Next(300), random.Next(120), random.Next(120), random.Next(120), random.Next(120), random.Next(120), random.Next(120) },
                BackgroundColor = new List<string> { c.ToRgbString() },
                BorderColor = new List<string> { c.ToRgbString() },
                BorderWidth = new List<double> { 0 },
            };
    }
    string[] items = { "Total Profit", "Total Short", "Net Bill" };
}