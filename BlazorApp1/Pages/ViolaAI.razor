@page "/violaai"
@using SharedProject.Services;
@inject NotificationService NotificationService
@inject DialogService DialogService
@using DataJuggler.Blazor.FileUpload

<RadzenNotification></RadzenNotification>
<div class="w-100 d-flex justify-content-center mt-4">
    <RadzenDropDown TValue="int" Value=@violaOffering TextProperty="Value" ValueProperty="Key" Data=@violaOfferings Change="@(args => {value = $"{args}"; StateHasChanged();})" Style="width: 100%; max-width: 280px;" />
</div>
<hr style="margin: 1em 10em 1em 10em" />
<div class="w-100 d-flex flex-column align-items-center">

    <div class="w-100 d-flex justify-content-center align-items-center gap-2">
        @if (violaOffering == 1)
        {
            <div class="d-flex justify-content-between">
                <RadzenSpeechToTextButton Style="height: 3em; background-color: black; color: white" Change="@(args => OnSpeechCaptured(args, true))" />
            </div>
            <div style="width: 500px">
                <RadzenFormField class="w-100 bg-transparent" Style="font-size: 0.8em; color:grey; width: 200px" Text="E.G. Heyy Viola, What is the legal definition of 'breach of contract'">
                    <RadzenTextArea class="bg-transparent w-100" @bind-Value=@message Style="color:black" />
                </RadzenFormField>
            </div>
        }
        else
        {
            <InputFile OnChange="@LoadFile"></InputFile>

        }
    </div>
    <div class="col-8 col-md-3">
        <RadzenButton class="mt-4 w-100" style="height: 40px; background-color: transparent; color: black; border: 1px solid black" Icon="send" BusyText="Viola is Processing ..." IsBusy=@busy Click=@OnClick Text="Submit" />
    </div>
</div>


<p>@paragraph</p>



@using UglyToad.PdfPig;
@using UglyToad.PdfPig.Content;

@code {
    private ElementReference fileInputRef;
    String paragraph = ".";
    private async void LoadFile(InputFileChangeEventArgs e)
    {
        if (!e.File.Name.EndsWith(".pdf"))
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "File Error", Detail = "Only PDF documents Allowed" });
            
        }
        var file = e.File;
        // Create a MemoryStream to hold the file data
        var memoryStream = new MemoryStream();
        // Copy the file data to the MemoryStream
        await file.OpenReadStream(maxAllowedSize: (1024 * 1024 * 5)).CopyToAsync(memoryStream);
        // Reset the stream position to the beginning for seeking
        memoryStream.Position = 0;
        using (PdfDocument document = PdfDocument.Open(memoryStream))
        {
            int pageCount = document.NumberOfPages;
            // Page number starts from 1, not 0.
            Page page = document.GetPage(1);

            double widthInPoints = page.Width;
            double heightInPoints = page.Height;

            string text = page.Text;
            paragraph = text;
            Console.WriteLine(text);
        }
    }
    int violaOffering = 0;
    IEnumerable<KeyValuePair<int, string>> violaOfferings = new []
    {
        new KeyValuePair<int, string>(1,"1. Ask Legal Questions"),
        new KeyValuePair<int, string>(2,"2. Analyze legal document"),
        new KeyValuePair<int, string>(3,"3. Summarize a legal document")
    };
    string htmlValue = "";
        bool busy = false;
        int count = 0;
        public async void countdown()
        {
            while(count <= 6)
            {
                count = count + 1;
                await Task.Delay(1000);
            }
        }
        string smsVisibility = "d-none";
        string? service = null;
        TwilioService TwilioService = new TwilioService();
        Variant variant = Variant.Outlined;
        String phoneNumber = "";
        String message = "";
        string value = "";
        List<String> customers = new List<string>()
    {
        "SMS","Voice", "Whatsapp", "Email", "Video"
    };

        public void onDropDown()
        {
            if (value.ToLower() == "sms")
            {
                value = "sms";
                smsVisibility = "d-block";
            }
        }
        async Task OnClick()
        {
            busy = true;
            if(message == string.Empty)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Please Type an Appropriate message", Detail = "Inapropriate Message", Duration = 4000 });
                busy = false;
                return;
            }
            else
            {
                CompletionMessageParameter body = new CompletionMessageParameter
                {
                    prompts = message
                };
                HttpClient httpClient = new HttpClient();
                HttpResponseMessage response = await httpClient.PostAsync("https://localhost:7282/api/OpenAI", new StringContent("\""+message+"\"", System.Text.Encoding.UTF8, "application/json"));
                string responseString = await response.Content.ReadAsStringAsync();
                Console.WriteLine(responseString);
                htmlValue += "<div>" + responseString + "<div/> <br />";
            }
            await Task.Delay(2000);
            busy = false;
        }
        private async void OnClick(string text)
        {
            //String status = TwilioService.SendSms(phoneNumber, message);
            CompletionMessageParameter body = new CompletionMessageParameter
        {
            prompts = text
        };
            HttpClient httpClient = new HttpClient();
            var jsonObj = Newtonsoft.Json.JsonConvert.SerializeObject(body);
            var content = new StringContent(jsonObj, System.Text.Encoding.UTF8, "application/json");
            HttpResponseMessage response = await httpClient.PostAsync("https://localhost:7282/api/OpenAI", content);

            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = response.Content.ToString(), Detail = response.StatusCode.ToString(), Duration = 100000 });

            //if(status == true)
            //{
            //    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Message Sent Successfully", Detail = "Success Detail", Duration = 4000 });
            //}
            //else
            //{
            //    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Message Could not be sent", Detail = text });
        //}
        }
        public void renderResponse(HttpResponseMessage response)
        {
            
        }

    void OnSpeechCaptured(string speechValue, bool updateTextArea)
    {

        if (updateTextArea)
        {
            message += speechValue;
        }
    }


}
