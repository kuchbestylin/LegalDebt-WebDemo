@page "/connect360"
@inject NotificationService NotificationService

<div class="w-100 mt-4 text-theme justify-content-center d-flex flex-column align-items-center">
    <Modal @ref="modal" title="Schedule bulk message" Size="ModalSize.Large" UseStaticBackdrop="false">
        <BodyTemplate>
            <div class="mb-4 mx-4 mt-2">
                <RadzenFormField Text="Add Recipients" class="w-100">
                    <RadzenDropDownDataGrid AllowColumnResize="true" Style="width: 100%" @ref="grid" Chips="true" AllowFiltering="false" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" @bind-Value=@selectedRecipients
                                            Multiple="true" Data=@clients TextProperty="FirstNames" ValueProperty="Id">
                        <Columns>
                            <RadzenDropDownDataGridColumn Width="50px" Sortable="false">
                                <HeaderTemplate>
                                    <RadzenCheckBox Disabled="@(!grid.AllowSelectAll)" TriState="false" TValue="bool" Value="@(clients.Any(c => selectedRecipients != null && selectedRecipients.Contains(c.Id)))"
                                                    Change="@(args => selectedRecipients = args ? grid.View.Cast<Client>().Select(c => c.Id) : selectedRecipients = Enumerable.Empty<int>())" />
                                </HeaderTemplate>
                                <Template Context="data">
                                    <RadzenCheckBox TriState="false" Value="@(selectedRecipients != null && selectedRecipients.Contains(((Client) data).Id))"
                                                    TValue="bool" Change=@(args => grid.SelectItem(data)) @onclick:stopPropagation />
                                </Template>
                            </RadzenDropDownDataGridColumn>
                            <RadzenDropDownDataGridColumn Property="Id" Title="ID" Width="40px" />
                            <RadzenDropDownDataGridColumn Property="FullName" Title="Name" Width="160px" />
                            <RadzenDropDownDataGridColumn Property="Client.City" Title="City" Width="100px" />
                            <RadzenDropDownDataGridColumn Property="Client.Country" Title="Country" Width="100px" />
                        </Columns>
                    </RadzenDropDownDataGrid>
                </RadzenFormField>
            </div>
            <div class="mb-4 mx-4">
                <RadzenFormField class="w-100" Style="font-size:0.8em" Text="Description" Variant="Variant.Outlined">
                    <RadzenTextBox @bind-Value="@formTitle" />
                </RadzenFormField>
            </div>
            <div class="mb-4 mx-4">
                <RadzenFormField class="w-100" Style="font-size:0.8em" Text="TextMessage" Variant="Variant.Outlined">
                    <RadzenTextArea Style="height: 7em" @bind-Value="@formMessage" />
                </RadzenFormField>
            </div>
            <div class="mx-4 mb-4">
                <RadzenFormField Text="Select Date">
                    <RadzenDatePicker @bind-Value=@formDate ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                </RadzenFormField>
            </div>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Cancel</Button>
            <Button Class="px-4 ms-2" Color="ButtonColor.Primary" @onclick="ScheduleMessage">Confirm</Button>
        </FooterTemplate>
    </Modal>
    <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick">Type a new Message and Schedule it</Button>
    <ConfirmDialog @ref="dialog" />
</div>
<section class="container-fluid mt-4 px-lg-5">
    <div class="d-flex justify-content-between flex-wrap gap-3">
        @foreach (var message in scheduledMessages)
        {
            var matchingClients = clients.Where(client => message.RecipientIds.Contains(client.Id)).ToList();
            <div class="p-4 message-box d-flex position-relative flex-column gap-3 col-12 col-md-12" style="box-shadow: 0px 0px 5px 5px rgba(0, 0, 0, 0.1);">
                <Icon @onclick="() => EditMessage(message.Id)" Class="edit-button" Name="IconName.PencilSquare" Style="position:absolute; top:0.7em; right:1.2em; font-size:1.1em"></Icon>
                <h5 class="fw-bold">@message.Title</h5>
                <p>@message.Message</p>
                <RadzenListBox Disabled @bind-Value=@value Data=@matchingClients TextProperty="FullName" ValueProperty="Id" Style="width: 100%; height: 200px">
                    <Template>
                        @((context as Client).FullName)
                    </Template>
                </RadzenListBox>
                <RadzenDatePicker TValue="DateTime" Value="@message.Date" ShowTime="true" Disabled ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="ddd d MMM HH:mm" />
                <Button Class="mt-3" Color="ButtonColor.Danger" @onclick="ShowConfirmationAsync"> Delete Message </Button>
            </div>
        }
    </div>
</section>

<RadzenNotification></RadzenNotification>


@code {
    public string value = "";
    private void EditModalSubmit()
    {
        int index = scheduledMessages.FindIndex(m => m.Id == editModalId);
        if(index != -1)
        {
            scheduledMessages[index].Title = editModalTitle;
            scheduledMessages[index].Message = editModalMessage;
            scheduledMessages[index].Date = editModalDate;
            scheduledMessages[index].RecipientIds = editModalRecipients;                  
        }
        editModal.HideAsync();
    }

    private void EditMessage(int Id)
    {
        var scheduledMessage = scheduledMessages.FirstOrDefault(sm => sm.Id == Id);
        if(scheduledMessage == null)
        {
            editModal.HideAsync();
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Server Error: ", Detail = "An error occured trying to process request", Duration = 20000 });
        }
        editModalTitle = scheduledMessage.Title;
        editModalMessage = scheduledMessage.Message;
        editModalRecipients = scheduledMessage.RecipientIds;
        editModalDate = scheduledMessage.Date;
        editModalId = scheduledMessage.Id;
        editModal.ShowAsync();

    }
    private List<ScheduledMessage> scheduledMessages = new List<ScheduledMessage>()
    {
        new ScheduledMessage(){ Id = 1, Title = "Reminder", Message = "Hie all, please be reminded to pay all your bills", RecipientIds = new List<int>(){ 1, 2}, Date = DateTime.Now },
        new ScheduledMessage(){ Id = 2, Title = "Reminder", Message = "Hie all, please be reminded to pay all your bills", RecipientIds = new List<int>(){ 1, 2}, Date = DateTime.Now },
        new ScheduledMessage(){ Id = 3, Title = "Reminder", Message = "Hie all, please be reminded to pay all your bills", RecipientIds = new List<int>(){ 1, 2}, Date = DateTime.Now },
        new ScheduledMessage(){ Id = 4, Title = "Reminder", Message = "Hie all, please be reminded to pay all your bills", RecipientIds = new List<int>(){ 1, 2}, Date = DateTime.Now },
        new ScheduledMessage(){ Id = 5, Title = "Reminder", Message = "Hie all, please be reminded to pay all your bills", RecipientIds = new List<int>(){ 1, 2}, Date = DateTime.Now }
    };

    RadzenDropDownDataGrid<IEnumerable<int>> grid;
    IEnumerable<Client> clients = new List<Client>
    {
        new Client() { Id= 1, FirstNames = "Gerhardus", LastName = "Gaoseb", FullName = "Gerhardus Gaoseb", TitleOfCourtesy = "Mr", CurrentCompany = "Ikanga Legal Practitioners", City = "Windhoek", Country = "Namibia", Email = "jknox@gmail.com"},
        new Client() { Id= 2, FirstNames = "Bra", LastName = "G", FullName = "Bra G", TitleOfCourtesy = "Mr", CurrentCompany = "Facebook.com", City = "Windhoek", Country = "Namibia", Email = "jknox@gmail.com"},
        new Client() { Id= 3, FirstNames = "Jean", LastName = "Claude", FullName = "Jean Claude", TitleOfCourtesy = "Mrs", CurrentCompany = "Exodus Legal Practitioners", City = "Windhoek", Country = "Namibia", Email = "jknox@gmail.com"},
        new Client() { Id= 4, FirstNames = "Hans", LastName = "Detriecht", FullName = "Hans Detriecht", TitleOfCourtesy = "Mr", CurrentCompany = "Shoprite", City = "Windhoek", Country = "Namibia", Email = "jknox@gmail.com"},
        new Client() { Id= 5, FirstNames = "Payet", LastName = "Dimitry", FullName = "Payet Dimitry", TitleOfCourtesy = "Mrs", CurrentCompany = "Legal Wise", City = "Windhoek", Country = "Namibia", Email = "jknox@gmail.com"},
        new Client() { Id= 6, FirstNames = "Maritjie", LastName = "HR", FullName = "Maritjie HR", TitleOfCourtesy = "Mr", CurrentCompany = "Ikanga Legal Practitioners", City = "Windhoek", Country = "Namibia", Email = "jknox@gmail.com"},
        new Client() { Id= 7, FirstNames = "Trent", LastName = "Arnold", FullName = "Trent Arnold", TitleOfCourtesy = "Mrs", CurrentCompany = "Telecom Namibia", City = "Windhoek", Country = "Namibia", Email = "jknox@gmail.com"},
        new Client() { Id= 8, FirstNames = "Phillipe", LastName = "Coutinho", FullName = "Phillipe Coutinho", TitleOfCourtesy = "Mr", CurrentCompany = "Ikanga Legal Practitioners", City = "Windhoek", Country = "Namibia", Email = "jknox@gmail.com"},
        new Client() { Id= 9, FirstNames = "William", LastName = "Carvalho", FullName = "William Carvalho", TitleOfCourtesy = "Mrs", CurrentCompany = "Microsoft", City = "Windhoek", Country = "Namibia", Email = "jknox@gmail.com"},
        new Client() { Id= 10, FirstNames = "Cristiano", LastName = "Ronaldo", FullName = "Critiano Ronaldo", TitleOfCourtesy = "Mr", CurrentCompany = "Ikanga Legal Practitioners", City = "Windhoek", Country = "Namibia", Email = "jknox@gmail.com"},
        new Client() { Id= 11, FirstNames = "Matheus", LastName = "Louthaus", FullName = "Matheus Louthaus", TitleOfCourtesy = "Mr", CurrentCompany = "Google", City = "Windhoek", Country = "Namibia", Email = "jknox@gmail.com"},
        new Client() { Id= 12, FirstNames = "Marius", LastName = "Bloodstan", FullName = "Marius Boodstan", TitleOfCourtesy = "Mrs", CurrentCompany = "Ikanga Legal Practitioners", City = "Windhoek", Country = "Namibia", Email = "jknox@gmail.com"}
    };

    private async Task ScheduleMessage()
    {
        List<string> errors = new List<string>(){};

        if(formDate == null || formDate < DateTime.Now)
        {
            errors.Add("Invalid Date Entered!");
        }
        else if(formMessage == null || formMessage.Length < 3)
        {
            errors.Add("Invalid Message!");
        }
        else if(formTitle == null)
        {
            errors.Add("Invalid Title!");
        }
        else if( selectedRecipients == null || selectedRecipients.Count() <= 0)
        {
            errors.Add("At-least 1 recepient required.");
        }
        else if(formTitle != null && formMessage != null && formDate != null && selectedRecipients.Count() > 0)
        {
            try
            {
                var newMessage = new ScheduledMessage()
                    {
                        Title = formTitle,
                        Message = formMessage,
                        Date = formDate,
                        RecipientIds = selectedRecipients
                    };
                scheduledMessages.Add(newMessage);
                StateHasChanged();
                await modal?.HideAsync();
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Reqeust Success: ", Detail = "Message Scheduled Successfully.", Duration = 20000 });
            }
            catch
            {
                errors.Add("An error occured. Please Contact Support");
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Server Error: ", Detail = "An error occured trying to process request", Duration = 20000 });
            }
        }
        await modal?.HideAsync();
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Server Error: ", Detail = "An error occured trying to process request", Duration = 20000 });


    }
    PreloadService PreloadService = new PreloadService();
    DateTime? formDate = DateTime.Now;
    string? formMessage = "";
    string? formTitle = "";
    IEnumerable<int>? selectedRecipients { get; set; }
    private Modal modal;
    private Modal editModal;
    int editModalId;
    string? editModalMessage = "";
    string? editModalTitle = "";
    IEnumerable<int>? editModalRecipients { get; set; }
    DateTime? editModalDate = DateTime.Now;
    private async Task OnShowModalClick()
    {
        formDate = null;
        formMessage = null;
        formTitle = null;
        selectedRecipients = null;
        await modal?.ShowAsync();
    }
    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }
    private async Task OnHideEditModalClick()
    {
        await editModal?.HideAsync();
    }

    List<BroadcastTextMessage> broadcastTextMessages = new List<BroadcastTextMessage>
    {
        new BroadcastTextMessage{ Id= 1, CellNumbers = new List<int>{}, Message = "Heyy there", date = DateTime.Now},
        new BroadcastTextMessage{ Id= 2, CellNumbers = new List<int>{}, Message = "Heyy there", date = DateTime.Now},
        new BroadcastTextMessage{ Id= 3, CellNumbers = new List<int>{}, Message = "Heyy there", date = DateTime.Now},
    };
    private ConfirmDialog dialog;

    private async Task ShowConfirmationAsync()
    {
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            await ShowSpinnerAsync(SpinnerColor.Success);
        }
        else
        {
            await ShowSpinnerAsync(SpinnerColor.Success);
        }
    }
    private async Task ShowSpinnerAsync(SpinnerColor spinnerColor)
    {
        PreloadService.Show(spinnerColor);

        await Task.Delay(3000); // call the service/api

        PreloadService.Hide();
    }
}







<Modal @ref="editModal" title="Edit your message" Size="ModalSize.Large" UseStaticBackdrop="false">
    <BodyTemplate>
        <div class="mb-4 mx-4 mt-2">
            <RadzenFormField Text="Edit Recipients" class="w-100">
                <RadzenDropDownDataGrid AllowColumnResize="true" Style="width: 100%" @ref="grid" Chips="true" AllowFiltering="false" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" @bind-Value=@editModalRecipients
                                        Multiple="true" Data=@clients TextProperty="FirstNames" ValueProperty="Id">
                    <Columns>
                        <RadzenDropDownDataGridColumn Width="50px" Sortable="false">
                            <HeaderTemplate>
                                <RadzenCheckBox Disabled="@(!grid.AllowSelectAll)" TriState="false" TValue="bool" Value="@(clients.Any(c => editModalRecipients != null && editModalRecipients.Contains(c.Id)))"
                                                Change="@(args => editModalRecipients = args ? grid.View.Cast<Client>().Select(c => c.Id) : editModalRecipients = Enumerable.Empty<int>())" />
                            </HeaderTemplate>
                            <Template Context="data">
                                <RadzenCheckBox TriState="false" Value="@(editModalRecipients != null && editModalRecipients.Contains(((Client) data).Id))"
                                                TValue="bool" Change=@(args => grid.SelectItem(data)) @onclick:stopPropagation />
                            </Template>
                        </RadzenDropDownDataGridColumn>
                        <RadzenDropDownDataGridColumn Property="Id" Title="ID" Width="40px" />
                        <RadzenDropDownDataGridColumn Property="FullName" Title="Name" Width="160px" />
                        <RadzenDropDownDataGridColumn Property="Client.City" Title="City" Width="100px" />
                        <RadzenDropDownDataGridColumn Property="Client.Country" Title="Country" Width="100px" />
                    </Columns>
                </RadzenDropDownDataGrid>
            </RadzenFormField>
        </div>
        <div class="mb-4 mx-4">
            <RadzenFormField class="w-100" Style="font-size:0.8em" Text="Description" Variant="Variant.Outlined">
                <RadzenTextBox @bind-Value="@editModalTitle" />
            </RadzenFormField>
        </div>
        <div class="mb-4 mx-4">
            <RadzenFormField class="w-100" Style="font-size:0.8em" Text="TextMessage" Variant="Variant.Outlined">
                <RadzenTextArea Style="height: 7em" @bind-Value="@editModalMessage" />
            </RadzenFormField>
        </div>
        <div class="mx-4 mb-4">
            <RadzenFormField Text="Select Date">
                <RadzenDatePicker @bind-Value=@editModalDate ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
            </RadzenFormField>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideEditModalClick">Cancel</Button>
        <Button Class="px-4 ms-2" Color="ButtonColor.Primary" @onclick="EditModalSubmit">Confirm</Button>
    </FooterTemplate>
</Modal>